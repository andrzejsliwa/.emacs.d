%% =============================================================================================

%% This module makes use of functionalities from TypEr and Dialyzer to get some type information
%% for an Erlang module.
%% =============================================================================================
%% @private
-module(wrangler_type_info).

-export([get_type_info_using_typer/1]).

-include("../include/wrangler_internal.hrl").

-record(tmpAcc, {file,		 
		 module,		
		 funcAcc=[],	
		 incFuncAcc=[],	
		 dialyzerObj=[]}).

%% -record(plt, {info           = dict:new() :: dict(),
%% 	      types          = dict:new() :: dict(),
%% 	      contracts      = dict:new() :: dict(),
%% 	      callbacks      = dict:new() :: dict(),
%%               exported_types = sets:new()  :: set()}).

-record(file_plt, {version = ""                :: string(),
		   file_md5_list = []          :: [{file:filename(), binary()}],
		   info = dict:new()           :: dict(),
		   contracts = dict:new()      :: dict(),
		   callbacks = dict:new()      :: dict(),
		   types = dict:new()          :: dict(),
                   exported_types = sets:new() :: set(),
		   mod_deps                    :: dict(),
		   implementation_md5 = []     :: [{file:filename(), binary()}]}).

get_type_info_using_typer(File) ->
    PLT = filename:join(code:priv_dir(wrangler), "dialyzer_plt"),
    Analysis = #typer_analysis{trust_plt = PLT},
    Analysis1 = Analysis#typer_analysis{files = [File]},
    Analysis2 = collect(Analysis1),
    TypeInfo = get_type_info(Analysis2),
    Fun = fun ({F, Module}) ->
		  RecMap = map__lookup(F, TypeInfo#typer_analysis.record),
		  TypeInfoPlt = TypeInfo#typer_analysis.trust_plt,
		  case dialyzer_plt:lookup_module(TypeInfoPlt, Module) of
	 	    none -> [];
		    {value, List} -> {F, List, RecMap}
		  end
	  end,
    lists:map(Fun, TypeInfo#typer_analysis.fms).
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  The following functions are from Typer with slight modifications.         %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-spec get_type_info(#typer_analysis{}) -> #typer_analysis{}.
get_type_info(#typer_analysis{callgraph = CallGraph,
			      trust_plt = TrustPLT,
			      codeserver = CodeServer} = Analysis) ->
    {StrippedCallGraph, _Ext} = dialyzer_callgraph:remove_external(CallGraph),
    try 
	NewPlt = dialyzer_succ_typings:analyze_callgraph(StrippedCallGraph, 
							 TrustPLT, CodeServer),
	Analysis#typer_analysis{callgraph = StrippedCallGraph, trust_plt = NewPlt}
    catch
	_E1:_E2 ->
	    throw({error, "Wrangler failed to infer the type information needed."})
    end.


-spec collect(#typer_analysis{}) -> #typer_analysis{}.
collect(Analysis) ->
    NewPlt =
        try get_dialyzer_plt(Analysis) of
            DialyzerPlt ->
                dialyzer_plt:merge_plts([Analysis#typer_analysis.trust_plt, DialyzerPlt])
        catch
            E1:E2 ->
                io:format("E1,E2:~p\n", [{E1,E2}]),
                throw("Wrangler failed to load the PLT.")
        end,
    lists:foldl(fun collect_one_file_info/2, 
         	Analysis#typer_analysis{trust_plt = NewPlt}, 
         	Analysis#typer_analysis.files).
   
collect_one_file_info(File, Analysis) ->
    ?debug("File:\n~p\n", [File]),
    Ds = [{d,Name,Val} || {Name,Val} <- Analysis#typer_analysis.macros],
    %% Current directory should also be included in "Includes".
    Includes = [filename:dirname(File)|Analysis#typer_analysis.includes],
    Is = [{i,Dir} || Dir <- Includes],
    Options = src_compiler_opts() ++ Is ++ Ds,
    case dialyzer_utils:get_abstract_code_from_src(File, Options) of
	{error, Reason} ->
	    throw({error, Reason});
	{ok, AbstractCode} ->
            case dialyzer_utils:get_core_from_abstract_code(AbstractCode, Options) of
                error -> throw("Could not get core erlang for "++File);
                {ok, Core} ->
                    case dialyzer_utils:get_record_and_type_info(AbstractCode) of
                        {error, Reason} -> throw(Reason);
                        {ok, Records} ->
                            Mod = cerl:concrete(cerl:module_name(Core)),
                            case dialyzer_utils:get_spec_info(Mod, AbstractCode, Records) of
                                {error, Reason} -> throw(Reason);
                                {ok, SpecInfo, CbInfo} ->
                                    ExpTypes = get_exported_types_from_core(Core),
                                    analyze_core_tree(Core, Records, SpecInfo, CbInfo,
                                                      ExpTypes, Analysis, File)
                            end
                    end
            end
    end.
                

    %%         case dialyzer_utils:get_core_from_abstract_code(AbstractCode, Options) of
    %%     	error -> throw({error, "Could not get core erlang for "++File});
    %%     	{ok, Core} ->
    %%     	    case dialyzer_utils:get_record_and_type_info(AbstractCode) of
    %%     		{error, Reason} -> throw({error, Reason});
    %%                     {ok, SpecInfo, CbInfo} ->
    %%                         ExpTypes = get_exported_types_from_core(Core),
    %%                         analyze_core_tree(Core, Records, SpecInfo, CbInfo,
    %%                                           ExpTypes, Analysis, File)
    %%                 end
    %%         end
    %% end.

get_exported_types_from_core(Core) ->
  Attrs = cerl:module_attrs(Core),
  ExpTypes1 = [cerl:concrete(L2) || {L1, L2} <- Attrs,
                                    cerl:is_literal(L1),
                                    cerl:is_literal(L2),
                                    cerl:concrete(L1) =:= 'export_type'],
  ExpTypes2 = lists:flatten(ExpTypes1),
  M = cerl:atom_val(cerl:module_name(Core)),
  sets:from_list([{M, F, A} || {F, A} <- ExpTypes2]).


analyze_core_tree(Core, Records, SpecInfo, CbInfo, ExpTypes, Analysis, File) ->
    Module = cerl:concrete(cerl:module_name(Core)),
    TmpTree = cerl:from_records(Core),
    CS1 = Analysis#typer_analysis.codeserver,
    NextLabel = dialyzer_codeserver:get_next_core_label(CS1),
    {Tree, NewLabel} = cerl_trees:label(TmpTree, NextLabel),
    CS2 = dialyzer_codeserver:insert(Module, Tree, CS1),
    CS3 = dialyzer_codeserver:set_next_core_label(NewLabel, CS2),
    CS4 = dialyzer_codeserver:store_temp_records(Module, Records, CS3),
    CS5 =
        case Analysis#typer_analysis.no_spec of
            true -> CS4;
            false ->
                dialyzer_codeserver:store_temp_contracts(Module, SpecInfo, CbInfo, CS4)
        end,
    OldExpTypes = dialyzer_codeserver:get_temp_exported_types(CS5),
    MergedExpTypes = sets:union(ExpTypes, OldExpTypes),
    CS6 = dialyzer_codeserver:insert_temp_exported_types(MergedExpTypes, CS5),
    Ex_Funcs = [{0,F,A} || {_,_,{F,A}} <- cerl:module_exports(Tree)],
    CG = Analysis#typer_analysis.callgraph,
    {V, E} = dialyzer_callgraph:scan_core_tree(Tree, CG),
    dialyzer_callgraph:add_edges(E, V, CG),
    Fun = fun analyze_one_function/2,
    All_Defs = cerl:module_defs(Tree),
    Acc = lists:foldl(Fun, #tmpAcc{file = File, module = Module}, All_Defs),
    Exported_FuncMap = map__insert({File, Ex_Funcs}, Analysis#typer_analysis.ex_func),
    %% we must sort all functions in the file which
    %% originate from this file by *numerical order* of lineNo
    Sorted_Functions = lists:keysort(1, Acc#tmpAcc.funcAcc),
    FuncMap = map__insert({File, Sorted_Functions}, Analysis#typer_analysis.func),
    %% we do not need to sort functions which are imported from included files
    IncFuncMap = map__insert({File, Acc#tmpAcc.incFuncAcc},
                             Analysis#typer_analysis.inc_func),
    FMs = Analysis#typer_analysis.fms ++ [{File, Module}],
    RecordMap = map__insert({File, Records}, Analysis#typer_analysis.record),
    Analysis#typer_analysis{fms = FMs,
                      callgraph = CG,
                      codeserver = CS6,
                      ex_func = Exported_FuncMap,
                      inc_func = IncFuncMap,
                      record = RecordMap,
                      func = FuncMap}.

%% analyze_core_tree(Core, Records, SpecInfo, CbInfo, ExpTypes, Analysis, File) ->
%%     Module = list_to_atom(filename:basename(File, ".erl")),
%%     TmpTree = cerl:from_records(Core),
%%     CS1 = Analysis#typer_analysis.codeserver,
%%     NextLabel = get_next_core_label(CS1),
%%     {Tree, NewLabel} = cerl_trees:label(TmpTree, NextLabel),
%%     CS2 = insert(Module, Tree, CS1),
%%     CS3 = set_next_core_label(NewLabel, CS2),
%%     CS4 = store_temp_records(Module, Records, CS3),
%%     CS5 = store_temp_contracts(Module, SpecInfo, CS4),
%%     Ex_Funcs = [{0,F,A} || {_,_,{F,A}} <- cerl:module_exports(Tree)],
%%     TmpCG = Analysis#typer_analysis.callgraph,
%%     CG = dialyzer_callgraph:scan_core_tree(Tree, TmpCG),
%%     Fun = fun analyze_one_function/2,
%%     All_Defs = cerl:module_defs(Tree),
%%     Acc = lists:foldl(Fun, #tmpAcc{file=File, module=Module}, All_Defs),
%%     Exported_FuncMap =insert({File, Ex_Funcs},
%%                            Analysis#typer_analysis.ex_func),
    
%%     Sorted_Functions = lists:keysort(1, Acc#tmpAcc.funcAcc),
%%     FuncMap = insert({File, Sorted_Functions},
%%                    Analysis#typer_analysis.func),
%%     IncFuncMap = insert({File, Acc#tmpAcc.incFuncAcc}, 
%%                       Analysis#typer_analysis.inc_func),
%%     Final_Files = Analysis#typer_analysis.files ++ [{File, Module}],
%%     RecordMap = insert({File, Records}, Analysis#typer_analysis.record),
%%     Analysis#typer_analysis{files=Final_Files,
%%                             callgraph=CG,
%%                             codeserver=CS5,
%%                             ex_func=Exported_FuncMap,
%%                             inc_func=IncFuncMap,
%%                             record=RecordMap,
%%                             func=FuncMap}.

analyze_one_function({Var, FunBody} = Function, Acc) ->
    F = cerl:fname_id(Var),
    A = cerl:fname_arity(Var),
    TmpDialyzerObj = {{Acc#tmpAcc.module, F, A}, Function},
    NewDialyzerObj = Acc#tmpAcc.dialyzerObj ++ [TmpDialyzerObj],
    [_, LineNo, {file, FileName}] = cerl:get_ann(FunBody),
    BaseName = filename:basename(FileName),
    FuncInfo = {LineNo, F, A},
    OriginalName = Acc#tmpAcc.file,
    {FuncAcc, IncFuncAcc} =
	case FileName =:= OriginalName orelse BaseName =:= OriginalName of
	    true ->
		{Acc#tmpAcc.funcAcc ++ [FuncInfo], Acc#tmpAcc.incFuncAcc};
	    false ->
		{Acc#tmpAcc.funcAcc, Acc#tmpAcc.incFuncAcc ++ [{FileName, FuncInfo}]}
	end,
    Acc#tmpAcc{funcAcc = FuncAcc,
	       incFuncAcc = IncFuncAcc,
	       dialyzerObj = NewDialyzerObj}.

-spec map__lookup(term(), map()) -> term().
map__lookup(Key, Map) ->
  try dict:fetch(Key, Map) catch error:_ -> none end.

src_compiler_opts() ->
  [no_copt, to_core, binary, return_errors, 
   no_inline, strict_record_tests, strict_record_updates].


-spec map__insert({term(), term()}, map()) -> map().
map__insert(Object, Map) ->
  {Key, Value} = Object,
  dict:store(Key, Value, Map).

-spec get_dialyzer_plt(#typer_analysis{}) -> #plt{}.
get_dialyzer_plt(#typer_analysis{plt = FileName}) ->
    case file:read_file(FileName) of
        {ok, Bin} ->
            case binary_to_term(Bin) of
                #file_plt{} = Rec ->
                    #plt{info = Rec#file_plt.info,
                         types = Rec#file_plt.types,
                         contracts = Rec#file_plt.contracts,
                         callbacks = Rec#file_plt.callbacks,
                         exported_types = Rec#file_plt.exported_types};
                _ ->
                    throw("Invalid PLT")
            end;
        _ ->throw("Invalid PLT file.")
    end.
        
  
  
